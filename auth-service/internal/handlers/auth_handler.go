package handlers

import (
	"context"
	"fmt"
	"github.com/VolodymyrShabat/TestMicroservices/auth-service/internal/services"
	"github.com/VolodymyrShabat/TestMicroservices/auth-service/internal/utils"
	authpb "github.com/VolodymyrShabat/TestMicroservices/auth-service/pkg/proto"
)

// AuthHandler implements the gRPC server interface generated by protoc.
type AuthHandler struct {
	authpb.UnimplementedAuthServiceServer
	AuthService *services.AuthService
	Convertor   *utils.Convertor
}

func NewAuthHandler(authService *services.AuthService) *AuthHandler {
	return &AuthHandler{
		AuthService: authService,
		Convertor:   utils.NewConvertor(),
	}
}

func (h *AuthHandler) Login(ctx context.Context, req *authpb.LoginRequest) (*authpb.LoginResponse, error) {
	token, err := h.AuthService.CreateJWT(req.Username, false)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	return h.Convertor.JWTTokenToProto(token), nil
}

func (h *AuthHandler) ValidateToken(ctx context.Context, req *authpb.ValidateTokenRequest) (*authpb.ValidateTokenResponse, error) {
	_, err := h.AuthService.VerifyToken(req.Token)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	return h.Convertor.ValidateTokenToProto(true), nil
}
